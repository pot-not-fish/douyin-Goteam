// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: video.proto

package video

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Message_VideoList_FullMethodName      = "/video.Message/VideoList"
	Message_VideoFeed_FullMethodName      = "/video.Message/VideoFeed"
	Message_VideoFavorite_FullMethodName  = "/video.Message/VideoFavorite"
	Message_VideoFavorList_FullMethodName = "/video.Message/VideoFavorList"
	Message_CommentAction_FullMethodName  = "/video.Message/CommentAction"
	Message_CommentList_FullMethodName    = "/video.Message/CommentList"
)

// MessageClient is the client API for Message service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageClient interface {
	VideoList(ctx context.Context, in *VideoListReq, opts ...grpc.CallOption) (*VideoListResp, error)
	VideoFeed(ctx context.Context, in *VideoFeedReq, opts ...grpc.CallOption) (*VideoFeedResp, error)
	VideoFavorite(ctx context.Context, in *VideoFavoriteReq, opts ...grpc.CallOption) (*VideoFavoriteResp, error)
	VideoFavorList(ctx context.Context, in *VideoFavorListReq, opts ...grpc.CallOption) (*VideoFavorListResp, error)
	CommentAction(ctx context.Context, in *CommentActionReq, opts ...grpc.CallOption) (*CommentActionResp, error)
	CommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListResp, error)
}

type messageClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageClient(cc grpc.ClientConnInterface) MessageClient {
	return &messageClient{cc}
}

func (c *messageClient) VideoList(ctx context.Context, in *VideoListReq, opts ...grpc.CallOption) (*VideoListResp, error) {
	out := new(VideoListResp)
	err := c.cc.Invoke(ctx, Message_VideoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) VideoFeed(ctx context.Context, in *VideoFeedReq, opts ...grpc.CallOption) (*VideoFeedResp, error) {
	out := new(VideoFeedResp)
	err := c.cc.Invoke(ctx, Message_VideoFeed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) VideoFavorite(ctx context.Context, in *VideoFavoriteReq, opts ...grpc.CallOption) (*VideoFavoriteResp, error) {
	out := new(VideoFavoriteResp)
	err := c.cc.Invoke(ctx, Message_VideoFavorite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) VideoFavorList(ctx context.Context, in *VideoFavorListReq, opts ...grpc.CallOption) (*VideoFavorListResp, error) {
	out := new(VideoFavorListResp)
	err := c.cc.Invoke(ctx, Message_VideoFavorList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) CommentAction(ctx context.Context, in *CommentActionReq, opts ...grpc.CallOption) (*CommentActionResp, error) {
	out := new(CommentActionResp)
	err := c.cc.Invoke(ctx, Message_CommentAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) CommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListResp, error) {
	out := new(CommentListResp)
	err := c.cc.Invoke(ctx, Message_CommentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServer is the server API for Message service.
// All implementations must embed UnimplementedMessageServer
// for forward compatibility
type MessageServer interface {
	VideoList(context.Context, *VideoListReq) (*VideoListResp, error)
	VideoFeed(context.Context, *VideoFeedReq) (*VideoFeedResp, error)
	VideoFavorite(context.Context, *VideoFavoriteReq) (*VideoFavoriteResp, error)
	VideoFavorList(context.Context, *VideoFavorListReq) (*VideoFavorListResp, error)
	CommentAction(context.Context, *CommentActionReq) (*CommentActionResp, error)
	CommentList(context.Context, *CommentListReq) (*CommentListResp, error)
	mustEmbedUnimplementedMessageServer()
}

// UnimplementedMessageServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServer struct {
}

func (UnimplementedMessageServer) VideoList(context.Context, *VideoListReq) (*VideoListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoList not implemented")
}
func (UnimplementedMessageServer) VideoFeed(context.Context, *VideoFeedReq) (*VideoFeedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoFeed not implemented")
}
func (UnimplementedMessageServer) VideoFavorite(context.Context, *VideoFavoriteReq) (*VideoFavoriteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoFavorite not implemented")
}
func (UnimplementedMessageServer) VideoFavorList(context.Context, *VideoFavorListReq) (*VideoFavorListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoFavorList not implemented")
}
func (UnimplementedMessageServer) CommentAction(context.Context, *CommentActionReq) (*CommentActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentAction not implemented")
}
func (UnimplementedMessageServer) CommentList(context.Context, *CommentListReq) (*CommentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentList not implemented")
}
func (UnimplementedMessageServer) mustEmbedUnimplementedMessageServer() {}

// UnsafeMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServer will
// result in compilation errors.
type UnsafeMessageServer interface {
	mustEmbedUnimplementedMessageServer()
}

func RegisterMessageServer(s grpc.ServiceRegistrar, srv MessageServer) {
	s.RegisterService(&Message_ServiceDesc, srv)
}

func _Message_VideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).VideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_VideoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).VideoList(ctx, req.(*VideoListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_VideoFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoFeedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).VideoFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_VideoFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).VideoFeed(ctx, req.(*VideoFeedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_VideoFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoFavoriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).VideoFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_VideoFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).VideoFavorite(ctx, req.(*VideoFavoriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_VideoFavorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoFavorListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).VideoFavorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_VideoFavorList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).VideoFavorList(ctx, req.(*VideoFavorListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_CommentAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).CommentAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_CommentAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).CommentAction(ctx, req.(*CommentActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_CommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).CommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_CommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).CommentList(ctx, req.(*CommentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Message_ServiceDesc is the grpc.ServiceDesc for Message service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Message_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.Message",
	HandlerType: (*MessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VideoList",
			Handler:    _Message_VideoList_Handler,
		},
		{
			MethodName: "VideoFeed",
			Handler:    _Message_VideoFeed_Handler,
		},
		{
			MethodName: "VideoFavorite",
			Handler:    _Message_VideoFavorite_Handler,
		},
		{
			MethodName: "VideoFavorList",
			Handler:    _Message_VideoFavorList_Handler,
		},
		{
			MethodName: "CommentAction",
			Handler:    _Message_CommentAction_Handler,
		},
		{
			MethodName: "CommentList",
			Handler:    _Message_CommentList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video.proto",
}
