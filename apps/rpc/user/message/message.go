// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package message

import (
	"context"

	"douyin/apps/rpc/user/types/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LoginReq     = user.LoginReq
	LoginResp    = user.LoginResp
	RegisterReq  = user.RegisterReq
	RegisterResp = user.RegisterResp
	UserinfoReq  = user.UserinfoReq
	UserinfoResp = user.UserinfoResp

	Message interface {
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		Userinfo(ctx context.Context, in *UserinfoReq, opts ...grpc.CallOption) (*UserinfoResp, error)
	}

	defaultMessage struct {
		cli zrpc.Client
	}
)

func NewMessage(cli zrpc.Client) Message {
	return &defaultMessage{
		cli: cli,
	}
}

func (m *defaultMessage) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := user.NewMessageClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultMessage) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := user.NewMessageClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultMessage) Userinfo(ctx context.Context, in *UserinfoReq, opts ...grpc.CallOption) (*UserinfoResp, error) {
	client := user.NewMessageClient(m.cli.Conn())
	return client.Userinfo(ctx, in, opts...)
}
