// Code generated by goctl. DO NOT EDIT.
// Source: relation.proto

package message

import (
	"context"

	"douyin/apps/rpc/relation/types/relation"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FriendUser         = relation.FriendUser
	RelationActionReq  = relation.RelationActionReq
	RelationActionResp = relation.RelationActionResp
	RelationFansReq    = relation.RelationFansReq
	RelationFansResp   = relation.RelationFansResp
	RelationFollowReq  = relation.RelationFollowReq
	RelationFollowResp = relation.RelationFollowResp
	RelationFriendReq  = relation.RelationFriendReq
	RelationFriendResp = relation.RelationFriendResp
	User               = relation.User

	Message interface {
		RelationAction(ctx context.Context, in *RelationActionReq, opts ...grpc.CallOption) (*RelationActionResp, error)
		RelationFollow(ctx context.Context, in *RelationFollowReq, opts ...grpc.CallOption) (*RelationFollowResp, error)
		RelationFans(ctx context.Context, in *RelationFansReq, opts ...grpc.CallOption) (*RelationFansResp, error)
		RelationFriend(ctx context.Context, in *RelationFriendReq, opts ...grpc.CallOption) (*RelationFriendResp, error)
	}

	defaultMessage struct {
		cli zrpc.Client
	}
)

func NewMessage(cli zrpc.Client) Message {
	return &defaultMessage{
		cli: cli,
	}
}

func (m *defaultMessage) RelationAction(ctx context.Context, in *RelationActionReq, opts ...grpc.CallOption) (*RelationActionResp, error) {
	client := relation.NewMessageClient(m.cli.Conn())
	return client.RelationAction(ctx, in, opts...)
}

func (m *defaultMessage) RelationFollow(ctx context.Context, in *RelationFollowReq, opts ...grpc.CallOption) (*RelationFollowResp, error) {
	client := relation.NewMessageClient(m.cli.Conn())
	return client.RelationFollow(ctx, in, opts...)
}

func (m *defaultMessage) RelationFans(ctx context.Context, in *RelationFansReq, opts ...grpc.CallOption) (*RelationFansResp, error) {
	client := relation.NewMessageClient(m.cli.Conn())
	return client.RelationFans(ctx, in, opts...)
}

func (m *defaultMessage) RelationFriend(ctx context.Context, in *RelationFriendReq, opts ...grpc.CallOption) (*RelationFriendResp, error) {
	client := relation.NewMessageClient(m.cli.Conn())
	return client.RelationFriend(ctx, in, opts...)
}
