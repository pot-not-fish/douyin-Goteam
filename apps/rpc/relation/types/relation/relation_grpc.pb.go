// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: relation.proto

package relation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Message_RelationAction_FullMethodName = "/relation.Message/RelationAction"
	Message_RelationFollow_FullMethodName = "/relation.Message/RelationFollow"
	Message_RelationFans_FullMethodName   = "/relation.Message/RelationFans"
	Message_RelationFriend_FullMethodName = "/relation.Message/RelationFriend"
)

// MessageClient is the client API for Message service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageClient interface {
	RelationAction(ctx context.Context, in *RelationActionReq, opts ...grpc.CallOption) (*RelationActionResp, error)
	RelationFollow(ctx context.Context, in *RelationFollowReq, opts ...grpc.CallOption) (*RelationFollowResp, error)
	RelationFans(ctx context.Context, in *RelationFansReq, opts ...grpc.CallOption) (*RelationFansResp, error)
	RelationFriend(ctx context.Context, in *RelationFriendReq, opts ...grpc.CallOption) (*RelationFriendResp, error)
}

type messageClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageClient(cc grpc.ClientConnInterface) MessageClient {
	return &messageClient{cc}
}

func (c *messageClient) RelationAction(ctx context.Context, in *RelationActionReq, opts ...grpc.CallOption) (*RelationActionResp, error) {
	out := new(RelationActionResp)
	err := c.cc.Invoke(ctx, Message_RelationAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) RelationFollow(ctx context.Context, in *RelationFollowReq, opts ...grpc.CallOption) (*RelationFollowResp, error) {
	out := new(RelationFollowResp)
	err := c.cc.Invoke(ctx, Message_RelationFollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) RelationFans(ctx context.Context, in *RelationFansReq, opts ...grpc.CallOption) (*RelationFansResp, error) {
	out := new(RelationFansResp)
	err := c.cc.Invoke(ctx, Message_RelationFans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) RelationFriend(ctx context.Context, in *RelationFriendReq, opts ...grpc.CallOption) (*RelationFriendResp, error) {
	out := new(RelationFriendResp)
	err := c.cc.Invoke(ctx, Message_RelationFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServer is the server API for Message service.
// All implementations must embed UnimplementedMessageServer
// for forward compatibility
type MessageServer interface {
	RelationAction(context.Context, *RelationActionReq) (*RelationActionResp, error)
	RelationFollow(context.Context, *RelationFollowReq) (*RelationFollowResp, error)
	RelationFans(context.Context, *RelationFansReq) (*RelationFansResp, error)
	RelationFriend(context.Context, *RelationFriendReq) (*RelationFriendResp, error)
	mustEmbedUnimplementedMessageServer()
}

// UnimplementedMessageServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServer struct {
}

func (UnimplementedMessageServer) RelationAction(context.Context, *RelationActionReq) (*RelationActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationAction not implemented")
}
func (UnimplementedMessageServer) RelationFollow(context.Context, *RelationFollowReq) (*RelationFollowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationFollow not implemented")
}
func (UnimplementedMessageServer) RelationFans(context.Context, *RelationFansReq) (*RelationFansResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationFans not implemented")
}
func (UnimplementedMessageServer) RelationFriend(context.Context, *RelationFriendReq) (*RelationFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationFriend not implemented")
}
func (UnimplementedMessageServer) mustEmbedUnimplementedMessageServer() {}

// UnsafeMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServer will
// result in compilation errors.
type UnsafeMessageServer interface {
	mustEmbedUnimplementedMessageServer()
}

func RegisterMessageServer(s grpc.ServiceRegistrar, srv MessageServer) {
	s.RegisterService(&Message_ServiceDesc, srv)
}

func _Message_RelationAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).RelationAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_RelationAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).RelationAction(ctx, req.(*RelationActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_RelationFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).RelationFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_RelationFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).RelationFollow(ctx, req.(*RelationFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_RelationFans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationFansReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).RelationFans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_RelationFans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).RelationFans(ctx, req.(*RelationFansReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_RelationFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).RelationFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_RelationFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).RelationFriend(ctx, req.(*RelationFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Message_ServiceDesc is the grpc.ServiceDesc for Message service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Message_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relation.Message",
	HandlerType: (*MessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RelationAction",
			Handler:    _Message_RelationAction_Handler,
		},
		{
			MethodName: "RelationFollow",
			Handler:    _Message_RelationFollow_Handler,
		},
		{
			MethodName: "RelationFans",
			Handler:    _Message_RelationFans_Handler,
		},
		{
			MethodName: "RelationFriend",
			Handler:    _Message_RelationFriend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relation.proto",
}
