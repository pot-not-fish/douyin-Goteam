// Code generated by goctl. DO NOT EDIT.
// Source: relation.proto

package server

import (
	"context"

	"douyin/apps/rpc/relation/internal/logic"
	"douyin/apps/rpc/relation/internal/svc"
	"douyin/apps/rpc/relation/types/relation"
)

type MessageServer struct {
	svcCtx *svc.ServiceContext
	relation.UnimplementedMessageServer
}

func NewMessageServer(svcCtx *svc.ServiceContext) *MessageServer {
	return &MessageServer{
		svcCtx: svcCtx,
	}
}

func (s *MessageServer) RelationAction(ctx context.Context, in *relation.RelationActionReq) (*relation.RelationActionResp, error) {
	l := logic.NewRelationActionLogic(ctx, s.svcCtx)
	return l.RelationAction(in)
}

func (s *MessageServer) RelationFollow(ctx context.Context, in *relation.RelationFollowReq) (*relation.RelationFollowResp, error) {
	l := logic.NewRelationFollowLogic(ctx, s.svcCtx)
	return l.RelationFollow(in)
}

func (s *MessageServer) RelationFans(ctx context.Context, in *relation.RelationFansReq) (*relation.RelationFansResp, error) {
	l := logic.NewRelationFansLogic(ctx, s.svcCtx)
	return l.RelationFans(in)
}

func (s *MessageServer) RelationFriend(ctx context.Context, in *relation.RelationFriendReq) (*relation.RelationFriendResp, error) {
	l := logic.NewRelationFriendLogic(ctx, s.svcCtx)
	return l.RelationFriend(in)
}
