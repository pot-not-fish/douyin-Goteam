// Code generated by goctl. DO NOT EDIT.
// Source: chat.proto

package message

import (
	"context"

	"douyin/apps/rpc/chat/types/chat"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	MessageActionReq  = chat.MessageActionReq
	MessageActionResp = chat.MessageActionResp
	MessageChatReq    = chat.MessageChatReq
	MessageChatResp   = chat.MessageChatResp
	MessageList       = chat.MessageList

	Message interface {
		MessageAction(ctx context.Context, in *MessageActionReq, opts ...grpc.CallOption) (*MessageActionResp, error)
		MessageChat(ctx context.Context, in *MessageChatReq, opts ...grpc.CallOption) (*MessageChatResp, error)
	}

	defaultMessage struct {
		cli zrpc.Client
	}
)

func NewMessage(cli zrpc.Client) Message {
	return &defaultMessage{
		cli: cli,
	}
}

func (m *defaultMessage) MessageAction(ctx context.Context, in *MessageActionReq, opts ...grpc.CallOption) (*MessageActionResp, error) {
	client := chat.NewMessageClient(m.cli.Conn())
	return client.MessageAction(ctx, in, opts...)
}

func (m *defaultMessage) MessageChat(ctx context.Context, in *MessageChatReq, opts ...grpc.CallOption) (*MessageChatResp, error) {
	client := chat.NewMessageClient(m.cli.Conn())
	return client.MessageChat(ctx, in, opts...)
}
